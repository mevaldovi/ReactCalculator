{"version":3,"sources":["App.js","index.js"],"names":["App","useState","preState","setpreState","currentState","setcurrentState","input","setInput","operator","setOperator","total","setTotal","inputNum","e","includes","target","innerText","pre","useEffect","operatorType","equals","cal","String","parseFloat","className","value","displayType","thousandSeparator","onClick","charAt","substring","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAkMeA,MA7Lf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0BJ,mBAAS,KAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,mBAAS,MAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA0BR,oBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAEMC,EAAW,SAACC,GAEZT,EAAaU,SAAS,MAA+B,MAAvBD,EAAEE,OAAOC,YAEvCN,GACFP,EAAY,IAIVE,EADJD,EACoB,SAACa,GAAD,OAASA,EAAMJ,EAAEE,OAAOC,WACxBH,EAAEE,OAAOC,WAE7BL,GAAS,KAGXO,qBAAU,WACRX,EAASH,KACR,CAACA,IAcJc,qBAAU,WACRX,EAAS,OACR,IAEH,IAAMY,EAAe,SAACN,GACpBF,GAAS,GACTF,EAAYI,EAAEE,OAAOC,WACA,KAAjBZ,IAEa,KAAbF,EACFkB,KAEAjB,EAAYC,GACZC,EAAgB,OAIde,EAAS,SAACP,GAId,IAAIQ,EACJ,OAJ4B,OAAvB,OAADR,QAAC,IAADA,OAAA,EAAAA,EAAGE,OAAOC,YACZL,GAAS,GAGHH,GACN,IAAK,IACHa,EAAMC,OAAOC,WAAWrB,GAAYqB,WAAWnB,IAC/C,MAEF,IAAK,IACHiB,EAAMC,OAAOC,WAAWrB,GAAYqB,WAAWnB,IAC/C,MAEF,IAAK,IACHiB,EAAMC,OAAOC,WAAWrB,GAAYqB,WAAWnB,IAC/C,MAEF,IAAK,IACHiB,EAAMC,OAAOC,WAAWrB,GAAYqB,WAAWnB,IAC/C,MACF,QACE,OAEJG,EAAS,IACTJ,EAAYkB,GACZhB,EAAgB,KA4BlB,OACE,qBAAKmB,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,SAAf,SACa,KAAVlB,GAA0B,MAAVA,EACf,cAAC,IAAD,CACEmB,MAAOnB,EACPoB,YAAa,OACbC,mBAAmB,IAGrB,cAAC,IAAD,CACEF,MAAOvB,EACPwB,YAAa,OACbC,mBAAmB,MAIzB,qBAAKH,UAAU,iBAAiBI,QA1BxB,WAEZzB,EAAY,IACZE,EAAgB,IAEhBE,EAAS,MAqBL,gBAGA,qBAAKiB,UAAU,iBAAiBI,QArCtB,WAGVvB,EAAgBiB,OAFpBpB,EAE4BqB,WAAWnB,GAAgB,IAAOF,EAEnCqB,WAAWnB,GAAgB,OAgClD,eAGA,qBAAKoB,UAAU,iBAAiBI,QAjDpB,WAEe,MAA3BxB,EAAayB,OAAO,GACtBxB,EAAgBD,EAAa0B,UAAU,IAEvCzB,EAAgB,IAAMD,IA4CpB,iBAGA,qBAAKoB,UAAU,aAAaI,QAAST,EAArC,eAGA,qBAAKK,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,aAAaI,QAAST,EAArC,eAGA,qBAAKK,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,aAAaI,QAAST,EAArC,eAGA,qBAAKK,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,aAAaI,QAAST,EAArC,eAGA,qBAAKK,UAAU,YAAYI,QAAShB,EAApC,eAGA,qBAAKY,UAAU,MAAMI,QAAShB,EAA9B,eAGA,qBAAKY,UAAU,MAAMI,QAASR,EAA9B,qBCrLRW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.aa24f998.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport \"./App.css\";\nimport NumberFormat from \"react-number-format\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  //set hooks for ReactApp\n  const [preState, setpreState] = useState(\"\");\n  const [currentState, setcurrentState] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [total, setTotal] = useState(false);\n\n  const inputNum = (e) => {\n    //if user clicks the \".\" button more than once, exit the function since a calculator can not display two \".\" at once\n    if (currentState.includes(\".\") && e.target.innerText === \".\") return;\n    //if a total exists, set prestate as an empty string.\n    if (total) {\n      setpreState(\"\");\n    }\n    //ternary operator checking to see if there's a current state. If no current state, set currentstate as preState and cancatenate event target's innerText\n    currentState\n      ? setcurrentState((pre) => pre + e.target.innerText)\n      : setcurrentState(e.target.innerText);\n    //re-set Total back to false to prepare for additional other calculations.\n    setTotal(false);\n  };\n\n  useEffect(() => {\n    setInput(currentState);\n  }, [currentState]);\n\n  // try {\n  //   // const { data } = await login({\n  //   //   variables: { ...formState },\n  //   // });\n  //   console.log(\"Testing testing 123\");\n  //   // localStorage.setItem('userId', data.login.user._id);\n  //   // localStorage.setItem(\"email\", data.login.user.email);\n  //   // Auth.login(data.login.token);\n  // } catch (err) {\n  //   console.error(err);\n  // }\n\n  useEffect(() => {\n    setInput(\"0\");\n  }, []);\n\n  const operatorType = (e) => {\n    setTotal(false);\n    setOperator(e.target.innerText);\n    if (currentState === \"\") return;\n    //if preState does NOT equal an empty string, run the equals function.\n    if (preState !== \"\") {\n      equals();\n    } else {\n      setpreState(currentState);\n      setcurrentState(\"\");\n    }\n  };\n\n  const equals = (e) => {\n    if (e?.target.innerText === \"=\") {\n      setTotal(true);\n    }\n    let cal;\n    switch (operator) {\n      case \"/\":\n        cal = String(parseFloat(preState) / parseFloat(currentState));\n        break;\n\n      case \"+\":\n        cal = String(parseFloat(preState) + parseFloat(currentState));\n        break;\n\n      case \"X\":\n        cal = String(parseFloat(preState) * parseFloat(currentState));\n        break;\n\n      case \"-\":\n        cal = String(parseFloat(preState) - parseFloat(currentState));\n        break;\n      default:\n        return;\n    }\n    setInput(\"\");\n    setpreState(cal);\n    setcurrentState(\"\");\n  };\n\n  const minusPlus = () => {\n    //currentState on lines 94, 85, and 97 need to be lit in aqua blue. Why arent they? Let's find out\n    if (currentState.charAt(0) === \"-\") {\n      setcurrentState(currentState.substring(1));\n    } else {\n      setcurrentState(\"-\" + currentState);\n    }\n  };\n\n  const percent = () => {\n    preState\n      ? // if there is preState, convert it to a an integer and divide by 100 and multiply that by the preState\n        setcurrentState(String((parseFloat(currentState) / 100) * preState))\n      : //if no preState ,  simply convert string to integer format and divide by 100.\n        setcurrentState(String(parseFloat(currentState) / 100));\n  };\n\n  const reset = () => {\n    //set preState to an empty string\n    setpreState(\"\");\n    setcurrentState(\"\");\n    //set currentState to an empty string\n    setInput(\"0\");\n    //setInput to zero\n  };\n  return (\n    <div className=\"container\">\n      <div className=\"wrapper\">\n        <div className=\"screen\">\n          {input !== \"\" || input === \"0\" ? (\n            <NumberFormat\n              value={input}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          ) : (\n            <NumberFormat\n              value={preState}\n              displayType={\"text\"}\n              thousandSeparator={true}\n            />\n          )}\n        </div>\n        <div className=\"btn light-gray\" onClick={reset}>\n          AC\n        </div>\n        <div className=\"btn light-gray\" onClick={percent}>\n          %\n        </div>\n        <div className=\"btn light-gray\" onClick={minusPlus}>\n          +/-\n        </div>\n        <div className=\"btn orange\" onClick={operatorType}>\n          /\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          7\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          8\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          9\n        </div>\n        <div className=\"btn orange\" onClick={operatorType}>\n          X\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          4\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          5\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          6\n        </div>\n        <div className=\"btn orange\" onClick={operatorType}>\n          +\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          1\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          2\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          3\n        </div>\n        <div className=\"btn orange\" onClick={operatorType}>\n          -\n        </div>\n        <div className=\" btn zero\" onClick={inputNum}>\n          0\n        </div>\n        <div className=\"btn\" onClick={inputNum}>\n          .\n        </div>\n        <div className=\"btn\" onClick={equals}>\n          =\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}